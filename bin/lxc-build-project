#!/bin/bash

#
# This script call lxc-create to create a LXC container and then prepare the
# container to use manage with Chef.
#

# Copyright (c) 2012 Aentos
# Author: Juanje Ojeda <juanje.ojeda@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Helpers

fail()
{
  echo "Failed to perfome: $@"
  exit 1
}

run_command()
{
  command="$@"
  if [ -n "$TEST" ];then
    echo $command
  else
    if [ $verbose -eq 1 ]; then
      echo "Running: ${command}" | tee -a ${logfile}
    else
      echo "Running: ${command}" >> ${logfile}
    fi
      eval ${command} >> ${logfile} 2>&1 || fail "${command}"
  fi
}

# Add a host path to the list to be binding inside the container
bind_path()
{
  host_path=$1
  guest_path=$2

  echo "${host_path} ${rootfs}/${guest_path} none bind 0 0" >> $path/fstab
}


# Create the user or move if s/he already exists
ensure_user()
{
  groups="sudo"
  # set the sudoers
  cat <<EOF > $rootfs/etc/sudoers.d/$user
$user ALL=(ALL) NOPASSWD:ALL
EOF
  run_command "chmod 0440 $rootfs/etc/sudoers.d/$user"

  if [ $distro = "debian" ]; then
    run_command "chroot $rootfs useradd --create-home -s /bin/bash $user"
  else
    run_command "chroot $rootfs usermod --login $user --home /home/$user --move-home --uid 999 ubuntu"
  fi
  echo "${user}:${user}" | chroot $rootfs chpasswd

  for group in $groups; do
    run_command "chroot $rootfs groupadd --system $group || true"
    run_command "chroot $rootfs adduser ${user} $group || true"
  done

  echo $user > $lxc_containers/$name/user

}

install_chef()
{
  run_command "chroot $rootfs apt-get update"
  run_command "chroot $rootfs apt-get --force-yes -y install wget build-essential git-core"
  run_command "wget -O $rootfs/tmp/install.sh http://opscode.com/chef/install.sh"
  run_command "chroot $rootfs /bin/bash /tmp/install.sh"
  chef_path="/opt/chef/embedded"
  run_command "HOME=$chef_path/lib/ruby/gems/1.9.1/gems/ chroot $rootfs $chef_path/bin/gem install berkshelf --no-rdoc --no-ri"

  if [ ! -d ${rootfs}/etc/chef ]; then
    run_command "mkdir -p $rootfs/etc/chef"
  fi

  if [ ! -d ${rootfs}/var/chef-solo ]; then
    run_command "mkdir -p $rootfs/var/chef-solo"
  fi

  # add solo.rb
  cat <<EOF > $rootfs/etc/chef/solo.rb
file_cache_path "/var/chef-solo"
cookbook_path "/var/chef-solo/cookbooks/"
json_attribs "/etc/chef/solo.json"
EOF

  # add solo.json
  if [ -n "$json_file" ]; then
    run_command "cp $json_file $rootfs/etc/chef/solo.json"
  else
    cat <<EOF > $rootfs/etc/chef/solo.json
{
  "run_list": [ "recipe[aentos-bootstrap]" ]
}
EOF
  fi
}

# Generate and inject the SSH key into the container
install_key()
{
  chroot_ssh_dir="${rootfs}/home/${user}/.ssh"
  [ -d $chroot_ssh_dir ] && rm -fr $chroot_ssh_dir

  run_command "mkdir $chroot_ssh_dir"

  id_filename="${lxc_cache}/id_project_${name}"
  [ -f $id_filename ] && rm -f $id_filename

  run_command "ssh-keygen -t rsa -N '' -f $id_filename"
  run_command "chown $SUDO_USER $id_filename"
  run_command "cp ${id_filename}.pub ${chroot_ssh_dir}/authorized_keys"
  run_command "chroot $rootfs chown -R $user /home/${user}/.ssh"
  run_command "chmod -R go-rwsx $chroot_ssh_dir"
}

create_container()
{
  run_command "lxc-create -n ${name} -t ${distro} ${params}"
  [ -n "$TEST" ] && exit
  if [ $distro = debian ]; then
    run_command "sed -i 's/lxc.utsname.*/lxc.utsname = $name/g' $path/config"
    nics=`grep -e '^lxc\.network\.type[ \t]*=[ \t]*veth' $path/config | wc -l`
    if [ $nics -eq 1 ]; then
      grep -q "^lxc.network.hwaddr" $path/config || cat <<EOF >> $path/config
lxc.network.hwaddr = 00:16:3e:$(openssl rand -hex 3| sed 's/\(..\)/\1:/g; s/.$//')
EOF
    fi
    run_command "echo '127.0.0.1       $name' >> $rootfs/etc/hosts"
    run_command "chroot $rootfs apt-get --force-yes -y install sudo"
  fi
}

lvm_params()
{
  lvmopts=""
  while [ $# -ne 0 ]; do
    case "$1" in
      --lvname|--vgname|--fstype|--fssize)
        if [ ! $2 ] || [[ "$2" =~ "-" ]];then
          return 1
        fi
        lvmopts="$lvmopts $1 $2"; shift 2;;
      *)
        shift 1;;
    esac
  done
  echo $lvmopts
}

extra_params()
{
  while [ $# -ne 0 ]; do
    case "$1" in
      -B)
        shift 1;
        case "$1" in
          dir)
            if [ ! $3 ] || [[ "$3" =~ "-" ]];then
              return 1
            fi
            fsopts="-B dir --dir $3"; shift 2;;
          lvm)
            lvmopts=$(lvm_params $@) || return 1
            num_of_params=$(echo $lvmopts | wc -w)
            fsopts="-B lvm $lvmopts"
            [ $num_of_params -ne 0 ] && shift $num_of_params;;
          [a-z]*)
            fsopts="-B $1";;
          -*)
            params="$params $1"
        esac
        shift 1;;
      *)
        params="$params $1"
        shift 1;;
    esac
  done
  echo "$fsopts -- $params"
}

usage()
{
  cat <<EOF
Usage:
    $(basename $0) [-h|--help] [-n | --name <name>] [-u|--user <user>]
    [-D|--distro <distro>] [-d|--debug] [-v|--verbose]
    [-j|--json-file <file>] [-- <template params>]

Options:
    -h, --help             Show this help
    -n, --name <name>      LXC container's name. This parameter is required.
    -u, --user <user>      The user to have created inside the container
    -D, --distro <distro>  'debian' or 'ubuntu'
    -j, --json-file <file> A local 'solo.json' file to install into the container
    -b, --berksfile <file> A local 'Berksfile' to install the cookbooks
                           inside the container
    -d, --debug            Activate the debuging mode for the script
    -v, --verbose          Show what is going on during the execution
    -- <template params>   Extra parameters to pass to the lxc-create command

EOF
}


options=$(getopt -o hu:p:n:D:j:d -l help,user:,path:,name:,distro:,json-file:,debug -- "$@")
if [ $? -ne 0 ] || [ $# -eq 0 ]; then
  usage
  exit 1
fi
eval set -- "$options"

debug=0
verbose=1
distro="ubuntu"
lxc_containers="/var/lib/lxc"
lxc_cache="/var/cache/lxc"
logfile="/var/log/lxc_$(date +%Y%m%d%H%M).log"
while true
do
  case "$1" in
  -h|--help)       usage && exit 0;;
  -u|--user)       user=$2; shift 2;;
  -p|--path)       path=$2; shift 2;;
  -n|--name)       name=$2; shift 2;;
  -D|--distro)     distro=$2; shift 2;;
  -j|--json-file)  json_file=$2; shift 2;;
  -d|--debug)      debug=1; shift 1;;
  -v|--verbose)    verbose=1; shift 1;;
  --)
     shift 1
     params=$(extra_params "$@")
     if [ $? -eq 1 ];then
       lxc-create -t $distro -h
       exit 1
     fi
     break;;
  *)   break ;;
  esac
done

if [ "$(id -u)" != "0" ] && [ -z "$TEST" ]; then
  echo -e "ERROR: This script should be run as 'root'\n"
  exit 1
fi

if [ $debug -eq 1 ]; then
  set -x
fi

if [ -z "$name" ]; then
  echo -e "ERROR: 'name' parameter is required\n"
  exit 1
fi

if [ -z "$path" ]; then
  path="${lxc_containers}/${name}"
fi

if [ $distro != "ubuntu" ] && [ $distro != "debian" ]; then
  echo "'distro' parameter must be 'debian' or 'ubuntu'"
  exit 1
fi

rootfs=$path/rootfs

if [ -z "$user" ]; then
  user="ubuntu"
fi

create_container

ensure_user

install_key

install_chef

echo "Project ${name} has been succefully created"
